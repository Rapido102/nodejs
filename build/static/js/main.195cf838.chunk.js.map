{"version":3,"sources":["components/Note.js","services/notes.js","App.js","serviceWorker.js","index.js"],"names":["Note","note","toggleImportance","btnDelete","label","important","className","titre","type","onClick","axios","get","then","response","data","newObject","post","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","console","log","Object","filter","keys","map","obj","onSubmit","event","preventDefault","noteObject","content","date","Date","toISOString","Math","random","id","length","returnedNote","concat","value","onChange","target","required","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAiBeA,EAfF,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,iBAAkBC,EAAe,EAAfA,UAC7BC,EAAQH,EAAKI,UACb,qBAAuB,iBAE7B,OACI,4BACI,yBAAKC,UAAU,IACVL,EAAKM,MACN,4BAAQC,KAAK,SAASF,UAAU,kBAAkBG,QAASP,GAAmBE,GAC9E,4BAAQI,KAAK,SAASF,UAAU,iBAAiBG,QAASN,GANlD,a,gBCkBT,EAnBA,WAEX,OADgBO,IAAMC,IAHV,UAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiB9B,EAdA,SAAAC,GAEX,OADgBL,IAAMM,KARV,SAQwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,MCN7C,IAkGeG,EAlGH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,KAKdC,qBAAU,WACNC,IAEKd,MAAK,SAAAe,GACFC,QAAQC,IAAIF,EAAab,MACzBM,EAASU,OAAOH,EAAab,YAEtC,IAuDiBS,GAAkBJ,EAAMY,QAAO,SAAA9B,GAAI,OAAuB,IAAnBA,EAAKI,aAChEyB,OAAOE,KAAKb,GAAOc,KAAI,SAAUC,GAE7B,OADAN,QAAQC,IAAIV,EAAMe,GAAK3B,OAChBY,EAAMe,GAAK3B,SAWtB,OACI,yBAAKD,UAAU,mBACX,qCACA,6BACI,4BAAQE,KAAK,SAASF,UAAU,kBAAkBG,QAAS,kBAAMe,GAAYD,KAA7E,QACKA,EAAU,YAAc,QAGjC,4BAhBJO,OAAOE,KAAKb,GAAOc,KAAI,SAACC,GAAD,OACnB,kBAAC,EAAD,CAAMjC,KAAMkB,EAAMe,SAgBlB,0BAAMC,SAvCE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfC,QAASlB,EACTmB,MAAM,IAAIC,MAAOC,cACjBrC,UAAWsC,KAAKC,SAAW,GAC3BC,GAAI1B,EAAM2B,OAAS,GAEvBpB,EACYY,GACP1B,MAAK,SAAAmC,GACF3B,EAASD,EAAM6B,OAAOD,IACtBzB,EAAW,SA4BX,2BAAOhB,UAAU,qBAAqB2C,MAAO5B,EACtC6B,SA9EM,SAACd,GACtBR,QAAQC,IAAIO,EAAMe,OAAOF,OACzB3B,EAAWc,EAAMe,OAAOF,QA4EmBG,UAAQ,IAC3C,4BAAQ5C,KAAK,SAASF,UAAU,uBAAhC,WCtFI+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTN/C,IAAMC,IAAI,+BAA+BC,MAAK,SAAAC,GAC1C,IAAMM,EAAQN,EAASC,KACvB4C,IAASC,OACL,kBAAC,EAAD,CAAKxC,MAAOA,IACZyC,SAASC,eAAe,YDoH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,MAAK,SAAAqD,GACjCA,EAAaC,kB","file":"static/js/main.195cf838.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({note, toggleImportance, btnDelete}) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important'\r\n    const labelDelete = 'delete'\r\n    return (\r\n        <li>\r\n            <div className=\"\">\r\n                {note.titre}\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={toggleImportance}>{label}</button>\r\n                <button type=\"button\" className=\"btn btn-danger\" onClick={btnDelete}>{labelDelete}</button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n\r\nconst baseUrl = '/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data)\r\n};\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data)\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n    return request.then(response => response.data)\r\n};\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`);\r\n    return request.then(response => response.data)\r\n};\r\n\r\nexport default {getAll, create, update, remove}","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport './CSS/css.css'\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState('');\n    const [showAll, setShowAll] = useState(true);\n    //=================================================================================\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                console.log(initialNotes.data);\n                setNotes(Object(initialNotes.data))\n            })\n    }, []);\n    //=================================================================================\n    const handleNoteChange = (event) => {\n        console.log(event.target.value);\n        setNewNote(event.target.value)\n    };\n    //=================================================================================\n    const btnDelete = (id) => {\n        const noteASuppr = notes.find(n => n.id === id);\n        if (!window.confirm(`Voulez-vous vraiment supprimer : ${noteASuppr.content}`)) {\n            return\n        }\n        noteService\n            .remove(id)\n            .then(returnedNote => {\n                //setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n                setNotes(notes.filter(note => note.id !== id))\n            })\n            .catch(error => {\n                alert(`the note '${noteASuppr.content}' was already deleted from server`)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    };\n    //=================================================================================\n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id);\n        const changedNote = {...note, important: !note.important};\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                alert(`the note '${note.content}' was already deleted from server`)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    };\n    //=================================================================================\n    const addNote = (event) => {\n        event.preventDefault();\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n            id: notes.length + 1,\n        };\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    };\n//=================================================================================\n    const notesToShow = showAll ? notes : notes.filter(note => note.important === true);\n    Object.keys(notes).map(function (obj) {\n        console.log(notes[obj].titre)\n        return notes[obj].titre\n    });\n    const rows = () =>\n        Object.keys(notes).map((obj) =>\n            <Note note={notes[obj]}\n                 // toggleImportance={() => toggleImportanceOf(note.id)}\n                  //btnDelete={() => btnDelete(note.id)}\n            />\n        )\n    ;\n//=================================================================================\n    return (\n        <div className=\"container-fluid\">\n            <h1>Notes</h1>\n            <div>\n                <button type=\"button\" className=\"btn btn-warning\" onClick={() => setShowAll(!showAll)}> show\n                    {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>{rows()}</ul>\n            <form onSubmit={addNote}>\n                <input className=\"form-control col-6\" value={newNote}\n                       onChange={handleNoteChange} required/>\n                <button type=\"submit\" className=\"btn btn btn-success\">save</button>\n            </form>\n        </div>\n    )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios'\n\n\naxios.get('http://localhost:3003/notes').then(response => {\n    const notes = response.data\n    ReactDOM.render(\n        <App notes={notes}/>,\n        document.getElementById('root')\n    )\n});\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}